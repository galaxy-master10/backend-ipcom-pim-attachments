// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet_ipcom_pim_infrastructure.Persistence.Context;

#nullable disable

namespace dotnet_ipcom_pim_infrastructure.Migrations
{
    [DbContext(typeof(PimDbContext))]
    [Migration("20250519083408_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttachmentsXAttachmentCategories", b =>
                {
                    b.Property<Guid>("Attachment_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentCategory_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Attachment_Id", "AttachmentCategory_Id");

                    b.HasIndex("AttachmentCategory_Id");

                    b.ToTable("AttachmentsXAttachmentCategories", (string)null);
                });

            modelBuilder.Entity("AttachmentsXCountries", b =>
                {
                    b.Property<Guid>("Attachment_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Country_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Attachment_Id", "Country_Id");

                    b.HasIndex("Country_Id");

                    b.ToTable("AttachmentsXCountries", (string)null);
                });

            modelBuilder.Entity("CompetenceCentersXCountryLanguages", b =>
                {
                    b.Property<Guid>("CompetenceCenter_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryLanguage_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompetenceCenter_Id", "CountryLanguage_Id");

                    b.HasIndex("CountryLanguage_Id");

                    b.ToTable("CompetenceCentersXCountryLanguages", (string)null);
                });

            modelBuilder.Entity("CountryLanguage", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("CountryLanguage");
                });

            modelBuilder.Entity("ProductsXAttachments", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Attachment_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_Id", "Attachment_Id");

                    b.HasIndex("Attachment_Id");

                    b.ToTable("ProductsXAttachments", (string)null);
                });

            modelBuilder.Entity("ProductsXBrands", b =>
                {
                    b.Property<Guid>("Brand_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Brand_Id", "Product_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ProductsXBrands", (string)null);
                });

            modelBuilder.Entity("ProductsXCompetenceCenters", b =>
                {
                    b.Property<Guid>("CompetenceCenter_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompetenceCenter_Id", "Product_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ProductsXCompetenceCenters", (string)null);
                });

            modelBuilder.Entity("ProductsXCountries", b =>
                {
                    b.Property<Guid>("Country_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Country_Id", "Product_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ProductsXCountries", (string)null);
                });

            modelBuilder.Entity("ProductsXCountryLanguages", b =>
                {
                    b.Property<Guid>("CountryLanguage_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountryLanguage_Id", "Product_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ProductsXCountryLanguages", (string)null);
                });

            modelBuilder.Entity("ProductsXLocations", b =>
                {
                    b.Property<Guid>("Location_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Location_Id", "Product_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ProductsXLocations", (string)null);
                });

            modelBuilder.Entity("ProductsXProductGroups", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Taxonomy1_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_Id", "Taxonomy1_Id");

                    b.HasIndex("Taxonomy1_Id");

                    b.ToTable("ProductsXProductGroups", (string)null);
                });

            modelBuilder.Entity("ProductsXReferences", b =>
                {
                    b.Property<Guid>("Reference_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Reference_Id", "Product_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ProductsXReferences", (string)null);
                });

            modelBuilder.Entity("ProductsXTaxonomy2", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Taxonomy2_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_Id", "Taxonomy2_Id");

                    b.HasIndex("Taxonomy2_Id");

                    b.ToTable("ProductsXTaxonomy2", (string)null);
                });

            modelBuilder.Entity("ProductsXTaxonomy3", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Taxonomy3_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_Id", "Taxonomy3_Id");

                    b.HasIndex("Taxonomy3_Id");

                    b.ToTable("ProductsXTaxonomy3", (string)null);
                });

            modelBuilder.Entity("ProductsXTaxonomy4", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Taxonomy4_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_Id", "Taxonomy4_Id");

                    b.HasIndex("Taxonomy4_Id");

                    b.ToTable("ProductsXTaxonomy4", (string)null);
                });

            modelBuilder.Entity("ProductsXTaxonomy5", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Taxonomy5_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_Id", "Taxonomy5_Id");

                    b.HasIndex("Taxonomy5_Id");

                    b.ToTable("ProductsXTaxonomy5", (string)null);
                });

            modelBuilder.Entity("ProductsXTaxonomy6", b =>
                {
                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Taxonomy6_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Product_Id", "Taxonomy6_Id");

                    b.HasIndex("Taxonomy6_Id");

                    b.ToTable("ProductsXTaxonomy6", (string)null);
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Md5")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NoResize")
                        .HasColumnType("bit");

                    b.Property<bool?>("Published")
                        .HasColumnType("bit");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.AttachmentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AttachmentCategories");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.CompetenceCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("Taxonomy1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Taxonomy2Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Taxonomy3Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Taxonomy4Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Taxonomy5Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Taxonomy6Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Taxonomy1Id");

                    b.HasIndex("Taxonomy2Id");

                    b.HasIndex("Taxonomy3Id");

                    b.HasIndex("Taxonomy4Id");

                    b.HasIndex("Taxonomy5Id");

                    b.HasIndex("Taxonomy6Id");

                    b.ToTable("CompetenceCenters");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.CountryLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Countries_Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Countries_Id");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Languages_Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Languages_Id");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Countries_Id");

                    b.HasIndex("Languages_Id");

                    b.ToTable("CountryLanguages", (string)null);
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISOCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<int?>("LocationTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Published")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.ProductCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Coating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoolingCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Density")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DimensionsInnerUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DimensionsOuterUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EdgeFinish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnergyEfficiency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FireClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeatingCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lambda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Length")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PipeDiameter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PressureStrength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductCode_Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductCode_Id");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Product_Id");

                    b.Property<string>("R")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefrigerantType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thickness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Volume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Width")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCode_Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ProductCharacteristics");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.ProductCode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EANCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Product_Id");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Product_Id");

                    b.ToTable("ProductCodes");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Reference", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Published")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("References");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy1", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Taxonomy1");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy2", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Taxonomy2");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy3", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Taxonomy3");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy4", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Taxonomy4");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy5", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Taxonomy5");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy6", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Taxonomy6");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Translation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachmentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageTranslation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TranslatableId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentCategoryId");

                    b.ToTable("Translation");
                });

            modelBuilder.Entity("AttachmentsXAttachmentCategories", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.AttachmentCategory", null)
                        .WithMany()
                        .HasForeignKey("AttachmentCategory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Attachment", null)
                        .WithMany()
                        .HasForeignKey("Attachment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AttachmentsXCountries", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Attachment", null)
                        .WithMany()
                        .HasForeignKey("Attachment_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("Country_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("CompetenceCentersXCountryLanguages", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.CompetenceCenter", null)
                        .WithMany()
                        .HasForeignKey("CompetenceCenter_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.CountryLanguage", null)
                        .WithMany()
                        .HasForeignKey("CountryLanguage_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryLanguage", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXAttachments", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Attachment", null)
                        .WithMany()
                        .HasForeignKey("Attachment_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXBrands", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Brand", null)
                        .WithMany()
                        .HasForeignKey("Brand_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXCompetenceCenters", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.CompetenceCenter", null)
                        .WithMany()
                        .HasForeignKey("CompetenceCenter_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXCountries", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("Country_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXCountryLanguages", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.CountryLanguage", null)
                        .WithMany()
                        .HasForeignKey("CountryLanguage_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXLocations", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("Location_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXProductGroups", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy1", null)
                        .WithMany()
                        .HasForeignKey("Taxonomy1_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXReferences", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Reference", null)
                        .WithMany()
                        .HasForeignKey("Reference_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXTaxonomy2", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy2", null)
                        .WithMany()
                        .HasForeignKey("Taxonomy2_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXTaxonomy3", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy3", null)
                        .WithMany()
                        .HasForeignKey("Taxonomy3_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXTaxonomy4", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy4", null)
                        .WithMany()
                        .HasForeignKey("Taxonomy4_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXTaxonomy5", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy5", null)
                        .WithMany()
                        .HasForeignKey("Taxonomy5_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsXTaxonomy6", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy6", null)
                        .WithMany()
                        .HasForeignKey("Taxonomy6_Id")
                        .IsRequired();
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Attachment", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Location", null)
                        .WithMany("Attachments")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.CompetenceCenter", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy1", null)
                        .WithMany("CompetenceCenters")
                        .HasForeignKey("Taxonomy1Id");

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy2", null)
                        .WithMany("CompetenceCenters")
                        .HasForeignKey("Taxonomy2Id");

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy3", null)
                        .WithMany("CompetenceCenters")
                        .HasForeignKey("Taxonomy3Id");

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy4", null)
                        .WithMany("CompetenceCenters")
                        .HasForeignKey("Taxonomy4Id");

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy5", null)
                        .WithMany("CompetenceCenters")
                        .HasForeignKey("Taxonomy5Id");

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Taxonomy6", null)
                        .WithMany("CompetenceCenters")
                        .HasForeignKey("Taxonomy6Id");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.CountryLanguage", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Country", "Country")
                        .WithMany("CountryLanguages")
                        .HasForeignKey("Countries_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Language", "Language")
                        .WithMany("CountryLanguages")
                        .HasForeignKey("Languages_Id")
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.ProductCharacteristic", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.ProductCode", "ProductCode")
                        .WithMany("ProductCharacteristics")
                        .HasForeignKey("ProductCode_Id")
                        .IsRequired();

                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", "Product")
                        .WithMany("ProductCharacteristics")
                        .HasForeignKey("Product_Id")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductCode");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.ProductCode", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.Product", "Product")
                        .WithMany("ProductCodes")
                        .HasForeignKey("Product_Id")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Translation", b =>
                {
                    b.HasOne("dotnet_ipcom_pim_domain.Entities.AttachmentCategory", "AttachmentCategory")
                        .WithMany("Translations")
                        .HasForeignKey("AttachmentCategoryId");

                    b.Navigation("AttachmentCategory");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.AttachmentCategory", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Country", b =>
                {
                    b.Navigation("CountryLanguages");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Language", b =>
                {
                    b.Navigation("CountryLanguages");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Location", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Product", b =>
                {
                    b.Navigation("ProductCharacteristics");

                    b.Navigation("ProductCodes");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.ProductCode", b =>
                {
                    b.Navigation("ProductCharacteristics");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy1", b =>
                {
                    b.Navigation("CompetenceCenters");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy2", b =>
                {
                    b.Navigation("CompetenceCenters");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy3", b =>
                {
                    b.Navigation("CompetenceCenters");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy4", b =>
                {
                    b.Navigation("CompetenceCenters");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy5", b =>
                {
                    b.Navigation("CompetenceCenters");
                });

            modelBuilder.Entity("dotnet_ipcom_pim_domain.Entities.Taxonomy6", b =>
                {
                    b.Navigation("CompetenceCenters");
                });
#pragma warning restore 612, 618
        }
    }
}
